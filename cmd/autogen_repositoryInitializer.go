// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that repositoryInitializerMock does implement repositoryInitializer.
// If this is not the case, regenerate this file with moq.
var _ repositoryInitializer = &repositoryInitializerMock{}

// repositoryInitializerMock is a mock implementation of repositoryInitializer.
//
//	func TestSomethingThatUsesrepositoryInitializer(t *testing.T) {
//
//		// make and configure a mocked repositoryInitializer
//		mockedrepositoryInitializer := &repositoryInitializerMock{
//			AddWorktreeFunc: func(worktreeName string, branchName string, createBranch bool, baseBranch string) error {
//				panic("mock out the AddWorktree method")
//			},
//			GetConfigFunc: func() *internal.Config {
//				panic("mock out the GetConfig method")
//			},
//			GetRepoPathFunc: func() string {
//				panic("mock out the GetRepoPath method")
//			},
//			SaveConfigFunc: func() error {
//				panic("mock out the SaveConfig method")
//			},
//			SaveStateFunc: func() error {
//				panic("mock out the SaveState method")
//			},
//		}
//
//		// use mockedrepositoryInitializer in code that requires repositoryInitializer
//		// and then make assertions.
//
//	}
type repositoryInitializerMock struct {
	// AddWorktreeFunc mocks the AddWorktree method.
	AddWorktreeFunc func(worktreeName string, branchName string, createBranch bool, baseBranch string) error

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *internal.Config

	// GetRepoPathFunc mocks the GetRepoPath method.
	GetRepoPathFunc func() string

	// SaveConfigFunc mocks the SaveConfig method.
	SaveConfigFunc func() error

	// SaveStateFunc mocks the SaveState method.
	SaveStateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// AddWorktree holds details about calls to the AddWorktree method.
		AddWorktree []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
			// BranchName is the branchName argument value.
			BranchName string
			// CreateBranch is the createBranch argument value.
			CreateBranch bool
			// BaseBranch is the baseBranch argument value.
			BaseBranch string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetRepoPath holds details about calls to the GetRepoPath method.
		GetRepoPath []struct {
		}
		// SaveConfig holds details about calls to the SaveConfig method.
		SaveConfig []struct {
		}
		// SaveState holds details about calls to the SaveState method.
		SaveState []struct {
		}
	}
	lockAddWorktree sync.RWMutex
	lockGetConfig   sync.RWMutex
	lockGetRepoPath sync.RWMutex
	lockSaveConfig  sync.RWMutex
	lockSaveState   sync.RWMutex
}

// AddWorktree calls AddWorktreeFunc.
func (mock *repositoryInitializerMock) AddWorktree(worktreeName string, branchName string, createBranch bool, baseBranch string) error {
	if mock.AddWorktreeFunc == nil {
		panic("repositoryInitializerMock.AddWorktreeFunc: method is nil but repositoryInitializer.AddWorktree was just called")
	}
	callInfo := struct {
		WorktreeName string
		BranchName   string
		CreateBranch bool
		BaseBranch   string
	}{
		WorktreeName: worktreeName,
		BranchName:   branchName,
		CreateBranch: createBranch,
		BaseBranch:   baseBranch,
	}
	mock.lockAddWorktree.Lock()
	mock.calls.AddWorktree = append(mock.calls.AddWorktree, callInfo)
	mock.lockAddWorktree.Unlock()
	return mock.AddWorktreeFunc(worktreeName, branchName, createBranch, baseBranch)
}

// AddWorktreeCalls gets all the calls that were made to AddWorktree.
// Check the length with:
//
//	len(mockedrepositoryInitializer.AddWorktreeCalls())
func (mock *repositoryInitializerMock) AddWorktreeCalls() []struct {
	WorktreeName string
	BranchName   string
	CreateBranch bool
	BaseBranch   string
} {
	var calls []struct {
		WorktreeName string
		BranchName   string
		CreateBranch bool
		BaseBranch   string
	}
	mock.lockAddWorktree.RLock()
	calls = mock.calls.AddWorktree
	mock.lockAddWorktree.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *repositoryInitializerMock) GetConfig() *internal.Config {
	if mock.GetConfigFunc == nil {
		panic("repositoryInitializerMock.GetConfigFunc: method is nil but repositoryInitializer.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedrepositoryInitializer.GetConfigCalls())
func (mock *repositoryInitializerMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetRepoPath calls GetRepoPathFunc.
func (mock *repositoryInitializerMock) GetRepoPath() string {
	if mock.GetRepoPathFunc == nil {
		panic("repositoryInitializerMock.GetRepoPathFunc: method is nil but repositoryInitializer.GetRepoPath was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRepoPath.Lock()
	mock.calls.GetRepoPath = append(mock.calls.GetRepoPath, callInfo)
	mock.lockGetRepoPath.Unlock()
	return mock.GetRepoPathFunc()
}

// GetRepoPathCalls gets all the calls that were made to GetRepoPath.
// Check the length with:
//
//	len(mockedrepositoryInitializer.GetRepoPathCalls())
func (mock *repositoryInitializerMock) GetRepoPathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRepoPath.RLock()
	calls = mock.calls.GetRepoPath
	mock.lockGetRepoPath.RUnlock()
	return calls
}

// SaveConfig calls SaveConfigFunc.
func (mock *repositoryInitializerMock) SaveConfig() error {
	if mock.SaveConfigFunc == nil {
		panic("repositoryInitializerMock.SaveConfigFunc: method is nil but repositoryInitializer.SaveConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSaveConfig.Lock()
	mock.calls.SaveConfig = append(mock.calls.SaveConfig, callInfo)
	mock.lockSaveConfig.Unlock()
	return mock.SaveConfigFunc()
}

// SaveConfigCalls gets all the calls that were made to SaveConfig.
// Check the length with:
//
//	len(mockedrepositoryInitializer.SaveConfigCalls())
func (mock *repositoryInitializerMock) SaveConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSaveConfig.RLock()
	calls = mock.calls.SaveConfig
	mock.lockSaveConfig.RUnlock()
	return calls
}

// SaveState calls SaveStateFunc.
func (mock *repositoryInitializerMock) SaveState() error {
	if mock.SaveStateFunc == nil {
		panic("repositoryInitializerMock.SaveStateFunc: method is nil but repositoryInitializer.SaveState was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSaveState.Lock()
	mock.calls.SaveState = append(mock.calls.SaveState, callInfo)
	mock.lockSaveState.Unlock()
	return mock.SaveStateFunc()
}

// SaveStateCalls gets all the calls that were made to SaveState.
// Check the length with:
//
//	len(mockedrepositoryInitializer.SaveStateCalls())
func (mock *repositoryInitializerMock) SaveStateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSaveState.RLock()
	calls = mock.calls.SaveState
	mock.lockSaveState.RUnlock()
	return calls
}
