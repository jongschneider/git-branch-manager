// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreeInfoProviderMock does implement worktreeInfoProvider.
// If this is not the case, regenerate this file with moq.
var _ worktreeInfoProvider = &worktreeInfoProviderMock{}

// worktreeInfoProviderMock is a mock implementation of worktreeInfoProvider.
//
//	func TestSomethingThatUsesworktreeInfoProvider(t *testing.T) {
//
//		// make and configure a mocked worktreeInfoProvider
//		mockedworktreeInfoProvider := &worktreeInfoProviderMock{
//			GetConfigFunc: func() *internal.Config {
//				panic("mock out the GetConfig method")
//			},
//			GetJiraTicketDetailsFunc: func(jiraKey string) (*internal.JiraTicketDetails, error) {
//				panic("mock out the GetJiraTicketDetails method")
//			},
//			GetStateFunc: func() *internal.State {
//				panic("mock out the GetState method")
//			},
//			GetWorktreeAheadBehindCountFunc: func(worktreePath string) (int, int, error) {
//				panic("mock out the GetWorktreeAheadBehindCount method")
//			},
//			GetWorktreeCommitHistoryFunc: func(worktreePath string, limit int) ([]internal.CommitInfo, error) {
//				panic("mock out the GetWorktreeCommitHistory method")
//			},
//			GetWorktreeCurrentBranchFunc: func(worktreePath string) (string, error) {
//				panic("mock out the GetWorktreeCurrentBranch method")
//			},
//			GetWorktreeFileChangesFunc: func(worktreePath string) ([]internal.FileChange, error) {
//				panic("mock out the GetWorktreeFileChanges method")
//			},
//			GetWorktreeStatusFunc: func(worktreePath string) (*internal.GitStatus, error) {
//				panic("mock out the GetWorktreeStatus method")
//			},
//			GetWorktreeUpstreamBranchFunc: func(worktreePath string) (string, error) {
//				panic("mock out the GetWorktreeUpstreamBranch method")
//			},
//			GetWorktreesFunc: func() ([]*internal.WorktreeInfo, error) {
//				panic("mock out the GetWorktrees method")
//			},
//			VerifyWorktreeRefFunc: func(ref string, worktreePath string) (bool, error) {
//				panic("mock out the VerifyWorktreeRef method")
//			},
//		}
//
//		// use mockedworktreeInfoProvider in code that requires worktreeInfoProvider
//		// and then make assertions.
//
//	}
type worktreeInfoProviderMock struct {
	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *internal.Config

	// GetJiraTicketDetailsFunc mocks the GetJiraTicketDetails method.
	GetJiraTicketDetailsFunc func(jiraKey string) (*internal.JiraTicketDetails, error)

	// GetStateFunc mocks the GetState method.
	GetStateFunc func() *internal.State

	// GetWorktreeAheadBehindCountFunc mocks the GetWorktreeAheadBehindCount method.
	GetWorktreeAheadBehindCountFunc func(worktreePath string) (int, int, error)

	// GetWorktreeCommitHistoryFunc mocks the GetWorktreeCommitHistory method.
	GetWorktreeCommitHistoryFunc func(worktreePath string, limit int) ([]internal.CommitInfo, error)

	// GetWorktreeCurrentBranchFunc mocks the GetWorktreeCurrentBranch method.
	GetWorktreeCurrentBranchFunc func(worktreePath string) (string, error)

	// GetWorktreeFileChangesFunc mocks the GetWorktreeFileChanges method.
	GetWorktreeFileChangesFunc func(worktreePath string) ([]internal.FileChange, error)

	// GetWorktreeStatusFunc mocks the GetWorktreeStatus method.
	GetWorktreeStatusFunc func(worktreePath string) (*internal.GitStatus, error)

	// GetWorktreeUpstreamBranchFunc mocks the GetWorktreeUpstreamBranch method.
	GetWorktreeUpstreamBranchFunc func(worktreePath string) (string, error)

	// GetWorktreesFunc mocks the GetWorktrees method.
	GetWorktreesFunc func() ([]*internal.WorktreeInfo, error)

	// VerifyWorktreeRefFunc mocks the VerifyWorktreeRef method.
	VerifyWorktreeRefFunc func(ref string, worktreePath string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetJiraTicketDetails holds details about calls to the GetJiraTicketDetails method.
		GetJiraTicketDetails []struct {
			// JiraKey is the jiraKey argument value.
			JiraKey string
		}
		// GetState holds details about calls to the GetState method.
		GetState []struct {
		}
		// GetWorktreeAheadBehindCount holds details about calls to the GetWorktreeAheadBehindCount method.
		GetWorktreeAheadBehindCount []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// GetWorktreeCommitHistory holds details about calls to the GetWorktreeCommitHistory method.
		GetWorktreeCommitHistory []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
			// Limit is the limit argument value.
			Limit int
		}
		// GetWorktreeCurrentBranch holds details about calls to the GetWorktreeCurrentBranch method.
		GetWorktreeCurrentBranch []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// GetWorktreeFileChanges holds details about calls to the GetWorktreeFileChanges method.
		GetWorktreeFileChanges []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// GetWorktreeStatus holds details about calls to the GetWorktreeStatus method.
		GetWorktreeStatus []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// GetWorktreeUpstreamBranch holds details about calls to the GetWorktreeUpstreamBranch method.
		GetWorktreeUpstreamBranch []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// GetWorktrees holds details about calls to the GetWorktrees method.
		GetWorktrees []struct {
		}
		// VerifyWorktreeRef holds details about calls to the VerifyWorktreeRef method.
		VerifyWorktreeRef []struct {
			// Ref is the ref argument value.
			Ref string
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
	}
	lockGetConfig                   sync.RWMutex
	lockGetJiraTicketDetails        sync.RWMutex
	lockGetState                    sync.RWMutex
	lockGetWorktreeAheadBehindCount sync.RWMutex
	lockGetWorktreeCommitHistory    sync.RWMutex
	lockGetWorktreeCurrentBranch    sync.RWMutex
	lockGetWorktreeFileChanges      sync.RWMutex
	lockGetWorktreeStatus           sync.RWMutex
	lockGetWorktreeUpstreamBranch   sync.RWMutex
	lockGetWorktrees                sync.RWMutex
	lockVerifyWorktreeRef           sync.RWMutex
}

// GetConfig calls GetConfigFunc.
func (mock *worktreeInfoProviderMock) GetConfig() *internal.Config {
	if mock.GetConfigFunc == nil {
		panic("worktreeInfoProviderMock.GetConfigFunc: method is nil but worktreeInfoProvider.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetConfigCalls())
func (mock *worktreeInfoProviderMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetJiraTicketDetails calls GetJiraTicketDetailsFunc.
func (mock *worktreeInfoProviderMock) GetJiraTicketDetails(jiraKey string) (*internal.JiraTicketDetails, error) {
	if mock.GetJiraTicketDetailsFunc == nil {
		panic("worktreeInfoProviderMock.GetJiraTicketDetailsFunc: method is nil but worktreeInfoProvider.GetJiraTicketDetails was just called")
	}
	callInfo := struct {
		JiraKey string
	}{
		JiraKey: jiraKey,
	}
	mock.lockGetJiraTicketDetails.Lock()
	mock.calls.GetJiraTicketDetails = append(mock.calls.GetJiraTicketDetails, callInfo)
	mock.lockGetJiraTicketDetails.Unlock()
	return mock.GetJiraTicketDetailsFunc(jiraKey)
}

// GetJiraTicketDetailsCalls gets all the calls that were made to GetJiraTicketDetails.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetJiraTicketDetailsCalls())
func (mock *worktreeInfoProviderMock) GetJiraTicketDetailsCalls() []struct {
	JiraKey string
} {
	var calls []struct {
		JiraKey string
	}
	mock.lockGetJiraTicketDetails.RLock()
	calls = mock.calls.GetJiraTicketDetails
	mock.lockGetJiraTicketDetails.RUnlock()
	return calls
}

// GetState calls GetStateFunc.
func (mock *worktreeInfoProviderMock) GetState() *internal.State {
	if mock.GetStateFunc == nil {
		panic("worktreeInfoProviderMock.GetStateFunc: method is nil but worktreeInfoProvider.GetState was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetState.Lock()
	mock.calls.GetState = append(mock.calls.GetState, callInfo)
	mock.lockGetState.Unlock()
	return mock.GetStateFunc()
}

// GetStateCalls gets all the calls that were made to GetState.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetStateCalls())
func (mock *worktreeInfoProviderMock) GetStateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetState.RLock()
	calls = mock.calls.GetState
	mock.lockGetState.RUnlock()
	return calls
}

// GetWorktreeAheadBehindCount calls GetWorktreeAheadBehindCountFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeAheadBehindCount(worktreePath string) (int, int, error) {
	if mock.GetWorktreeAheadBehindCountFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeAheadBehindCountFunc: method is nil but worktreeInfoProvider.GetWorktreeAheadBehindCount was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeAheadBehindCount.Lock()
	mock.calls.GetWorktreeAheadBehindCount = append(mock.calls.GetWorktreeAheadBehindCount, callInfo)
	mock.lockGetWorktreeAheadBehindCount.Unlock()
	return mock.GetWorktreeAheadBehindCountFunc(worktreePath)
}

// GetWorktreeAheadBehindCountCalls gets all the calls that were made to GetWorktreeAheadBehindCount.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeAheadBehindCountCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeAheadBehindCountCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeAheadBehindCount.RLock()
	calls = mock.calls.GetWorktreeAheadBehindCount
	mock.lockGetWorktreeAheadBehindCount.RUnlock()
	return calls
}

// GetWorktreeCommitHistory calls GetWorktreeCommitHistoryFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeCommitHistory(worktreePath string, limit int) ([]internal.CommitInfo, error) {
	if mock.GetWorktreeCommitHistoryFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeCommitHistoryFunc: method is nil but worktreeInfoProvider.GetWorktreeCommitHistory was just called")
	}
	callInfo := struct {
		WorktreePath string
		Limit        int
	}{
		WorktreePath: worktreePath,
		Limit:        limit,
	}
	mock.lockGetWorktreeCommitHistory.Lock()
	mock.calls.GetWorktreeCommitHistory = append(mock.calls.GetWorktreeCommitHistory, callInfo)
	mock.lockGetWorktreeCommitHistory.Unlock()
	return mock.GetWorktreeCommitHistoryFunc(worktreePath, limit)
}

// GetWorktreeCommitHistoryCalls gets all the calls that were made to GetWorktreeCommitHistory.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeCommitHistoryCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeCommitHistoryCalls() []struct {
	WorktreePath string
	Limit        int
} {
	var calls []struct {
		WorktreePath string
		Limit        int
	}
	mock.lockGetWorktreeCommitHistory.RLock()
	calls = mock.calls.GetWorktreeCommitHistory
	mock.lockGetWorktreeCommitHistory.RUnlock()
	return calls
}

// GetWorktreeCurrentBranch calls GetWorktreeCurrentBranchFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeCurrentBranch(worktreePath string) (string, error) {
	if mock.GetWorktreeCurrentBranchFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeCurrentBranchFunc: method is nil but worktreeInfoProvider.GetWorktreeCurrentBranch was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeCurrentBranch.Lock()
	mock.calls.GetWorktreeCurrentBranch = append(mock.calls.GetWorktreeCurrentBranch, callInfo)
	mock.lockGetWorktreeCurrentBranch.Unlock()
	return mock.GetWorktreeCurrentBranchFunc(worktreePath)
}

// GetWorktreeCurrentBranchCalls gets all the calls that were made to GetWorktreeCurrentBranch.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeCurrentBranchCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeCurrentBranchCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeCurrentBranch.RLock()
	calls = mock.calls.GetWorktreeCurrentBranch
	mock.lockGetWorktreeCurrentBranch.RUnlock()
	return calls
}

// GetWorktreeFileChanges calls GetWorktreeFileChangesFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeFileChanges(worktreePath string) ([]internal.FileChange, error) {
	if mock.GetWorktreeFileChangesFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeFileChangesFunc: method is nil but worktreeInfoProvider.GetWorktreeFileChanges was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeFileChanges.Lock()
	mock.calls.GetWorktreeFileChanges = append(mock.calls.GetWorktreeFileChanges, callInfo)
	mock.lockGetWorktreeFileChanges.Unlock()
	return mock.GetWorktreeFileChangesFunc(worktreePath)
}

// GetWorktreeFileChangesCalls gets all the calls that were made to GetWorktreeFileChanges.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeFileChangesCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeFileChangesCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeFileChanges.RLock()
	calls = mock.calls.GetWorktreeFileChanges
	mock.lockGetWorktreeFileChanges.RUnlock()
	return calls
}

// GetWorktreeStatus calls GetWorktreeStatusFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeStatus(worktreePath string) (*internal.GitStatus, error) {
	if mock.GetWorktreeStatusFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeStatusFunc: method is nil but worktreeInfoProvider.GetWorktreeStatus was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeStatus.Lock()
	mock.calls.GetWorktreeStatus = append(mock.calls.GetWorktreeStatus, callInfo)
	mock.lockGetWorktreeStatus.Unlock()
	return mock.GetWorktreeStatusFunc(worktreePath)
}

// GetWorktreeStatusCalls gets all the calls that were made to GetWorktreeStatus.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeStatusCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeStatusCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeStatus.RLock()
	calls = mock.calls.GetWorktreeStatus
	mock.lockGetWorktreeStatus.RUnlock()
	return calls
}

// GetWorktreeUpstreamBranch calls GetWorktreeUpstreamBranchFunc.
func (mock *worktreeInfoProviderMock) GetWorktreeUpstreamBranch(worktreePath string) (string, error) {
	if mock.GetWorktreeUpstreamBranchFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreeUpstreamBranchFunc: method is nil but worktreeInfoProvider.GetWorktreeUpstreamBranch was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeUpstreamBranch.Lock()
	mock.calls.GetWorktreeUpstreamBranch = append(mock.calls.GetWorktreeUpstreamBranch, callInfo)
	mock.lockGetWorktreeUpstreamBranch.Unlock()
	return mock.GetWorktreeUpstreamBranchFunc(worktreePath)
}

// GetWorktreeUpstreamBranchCalls gets all the calls that were made to GetWorktreeUpstreamBranch.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreeUpstreamBranchCalls())
func (mock *worktreeInfoProviderMock) GetWorktreeUpstreamBranchCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeUpstreamBranch.RLock()
	calls = mock.calls.GetWorktreeUpstreamBranch
	mock.lockGetWorktreeUpstreamBranch.RUnlock()
	return calls
}

// GetWorktrees calls GetWorktreesFunc.
func (mock *worktreeInfoProviderMock) GetWorktrees() ([]*internal.WorktreeInfo, error) {
	if mock.GetWorktreesFunc == nil {
		panic("worktreeInfoProviderMock.GetWorktreesFunc: method is nil but worktreeInfoProvider.GetWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWorktrees.Lock()
	mock.calls.GetWorktrees = append(mock.calls.GetWorktrees, callInfo)
	mock.lockGetWorktrees.Unlock()
	return mock.GetWorktreesFunc()
}

// GetWorktreesCalls gets all the calls that were made to GetWorktrees.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.GetWorktreesCalls())
func (mock *worktreeInfoProviderMock) GetWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWorktrees.RLock()
	calls = mock.calls.GetWorktrees
	mock.lockGetWorktrees.RUnlock()
	return calls
}

// VerifyWorktreeRef calls VerifyWorktreeRefFunc.
func (mock *worktreeInfoProviderMock) VerifyWorktreeRef(ref string, worktreePath string) (bool, error) {
	if mock.VerifyWorktreeRefFunc == nil {
		panic("worktreeInfoProviderMock.VerifyWorktreeRefFunc: method is nil but worktreeInfoProvider.VerifyWorktreeRef was just called")
	}
	callInfo := struct {
		Ref          string
		WorktreePath string
	}{
		Ref:          ref,
		WorktreePath: worktreePath,
	}
	mock.lockVerifyWorktreeRef.Lock()
	mock.calls.VerifyWorktreeRef = append(mock.calls.VerifyWorktreeRef, callInfo)
	mock.lockVerifyWorktreeRef.Unlock()
	return mock.VerifyWorktreeRefFunc(ref, worktreePath)
}

// VerifyWorktreeRefCalls gets all the calls that were made to VerifyWorktreeRef.
// Check the length with:
//
//	len(mockedworktreeInfoProvider.VerifyWorktreeRefCalls())
func (mock *worktreeInfoProviderMock) VerifyWorktreeRefCalls() []struct {
	Ref          string
	WorktreePath string
} {
	var calls []struct {
		Ref          string
		WorktreePath string
	}
	mock.lockVerifyWorktreeRef.RLock()
	calls = mock.calls.VerifyWorktreeRef
	mock.lockVerifyWorktreeRef.RUnlock()
	return calls
}
