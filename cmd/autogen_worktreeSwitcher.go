// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreeSwitcherMock does implement worktreeSwitcher.
// If this is not the case, regenerate this file with moq.
var _ worktreeSwitcher = &worktreeSwitcherMock{}

// worktreeSwitcherMock is a mock implementation of worktreeSwitcher.
//
//	func TestSomethingThatUsesworktreeSwitcher(t *testing.T) {
//
//		// make and configure a mocked worktreeSwitcher
//		mockedworktreeSwitcher := &worktreeSwitcherMock{
//			GetAllWorktreesFunc: func() (map[string]*internal.WorktreeListInfo, error) {
//				panic("mock out the GetAllWorktrees method")
//			},
//			GetPreviousWorktreeFunc: func() string {
//				panic("mock out the GetPreviousWorktree method")
//			},
//			GetSortedWorktreeNamesFunc: func(worktrees map[string]*internal.WorktreeListInfo) []string {
//				panic("mock out the GetSortedWorktreeNames method")
//			},
//			GetStatusIconFunc: func(gitStatus *internal.GitStatus) string {
//				panic("mock out the GetStatusIcon method")
//			},
//			GetWorktreePathFunc: func(worktreeName string) (string, error) {
//				panic("mock out the GetWorktreePath method")
//			},
//			SetCurrentWorktreeFunc: func(worktreeName string) error {
//				panic("mock out the SetCurrentWorktree method")
//			},
//		}
//
//		// use mockedworktreeSwitcher in code that requires worktreeSwitcher
//		// and then make assertions.
//
//	}
type worktreeSwitcherMock struct {
	// GetAllWorktreesFunc mocks the GetAllWorktrees method.
	GetAllWorktreesFunc func() (map[string]*internal.WorktreeListInfo, error)

	// GetPreviousWorktreeFunc mocks the GetPreviousWorktree method.
	GetPreviousWorktreeFunc func() string

	// GetSortedWorktreeNamesFunc mocks the GetSortedWorktreeNames method.
	GetSortedWorktreeNamesFunc func(worktrees map[string]*internal.WorktreeListInfo) []string

	// GetStatusIconFunc mocks the GetStatusIcon method.
	GetStatusIconFunc func(gitStatus *internal.GitStatus) string

	// GetWorktreePathFunc mocks the GetWorktreePath method.
	GetWorktreePathFunc func(worktreeName string) (string, error)

	// SetCurrentWorktreeFunc mocks the SetCurrentWorktree method.
	SetCurrentWorktreeFunc func(worktreeName string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllWorktrees holds details about calls to the GetAllWorktrees method.
		GetAllWorktrees []struct {
		}
		// GetPreviousWorktree holds details about calls to the GetPreviousWorktree method.
		GetPreviousWorktree []struct {
		}
		// GetSortedWorktreeNames holds details about calls to the GetSortedWorktreeNames method.
		GetSortedWorktreeNames []struct {
			// Worktrees is the worktrees argument value.
			Worktrees map[string]*internal.WorktreeListInfo
		}
		// GetStatusIcon holds details about calls to the GetStatusIcon method.
		GetStatusIcon []struct {
			// GitStatus is the gitStatus argument value.
			GitStatus *internal.GitStatus
		}
		// GetWorktreePath holds details about calls to the GetWorktreePath method.
		GetWorktreePath []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
		}
		// SetCurrentWorktree holds details about calls to the SetCurrentWorktree method.
		SetCurrentWorktree []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
		}
	}
	lockGetAllWorktrees        sync.RWMutex
	lockGetPreviousWorktree    sync.RWMutex
	lockGetSortedWorktreeNames sync.RWMutex
	lockGetStatusIcon          sync.RWMutex
	lockGetWorktreePath        sync.RWMutex
	lockSetCurrentWorktree     sync.RWMutex
}

// GetAllWorktrees calls GetAllWorktreesFunc.
func (mock *worktreeSwitcherMock) GetAllWorktrees() (map[string]*internal.WorktreeListInfo, error) {
	if mock.GetAllWorktreesFunc == nil {
		panic("worktreeSwitcherMock.GetAllWorktreesFunc: method is nil but worktreeSwitcher.GetAllWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllWorktrees.Lock()
	mock.calls.GetAllWorktrees = append(mock.calls.GetAllWorktrees, callInfo)
	mock.lockGetAllWorktrees.Unlock()
	return mock.GetAllWorktreesFunc()
}

// GetAllWorktreesCalls gets all the calls that were made to GetAllWorktrees.
// Check the length with:
//
//	len(mockedworktreeSwitcher.GetAllWorktreesCalls())
func (mock *worktreeSwitcherMock) GetAllWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllWorktrees.RLock()
	calls = mock.calls.GetAllWorktrees
	mock.lockGetAllWorktrees.RUnlock()
	return calls
}

// GetPreviousWorktree calls GetPreviousWorktreeFunc.
func (mock *worktreeSwitcherMock) GetPreviousWorktree() string {
	if mock.GetPreviousWorktreeFunc == nil {
		panic("worktreeSwitcherMock.GetPreviousWorktreeFunc: method is nil but worktreeSwitcher.GetPreviousWorktree was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPreviousWorktree.Lock()
	mock.calls.GetPreviousWorktree = append(mock.calls.GetPreviousWorktree, callInfo)
	mock.lockGetPreviousWorktree.Unlock()
	return mock.GetPreviousWorktreeFunc()
}

// GetPreviousWorktreeCalls gets all the calls that were made to GetPreviousWorktree.
// Check the length with:
//
//	len(mockedworktreeSwitcher.GetPreviousWorktreeCalls())
func (mock *worktreeSwitcherMock) GetPreviousWorktreeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPreviousWorktree.RLock()
	calls = mock.calls.GetPreviousWorktree
	mock.lockGetPreviousWorktree.RUnlock()
	return calls
}

// GetSortedWorktreeNames calls GetSortedWorktreeNamesFunc.
func (mock *worktreeSwitcherMock) GetSortedWorktreeNames(worktrees map[string]*internal.WorktreeListInfo) []string {
	if mock.GetSortedWorktreeNamesFunc == nil {
		panic("worktreeSwitcherMock.GetSortedWorktreeNamesFunc: method is nil but worktreeSwitcher.GetSortedWorktreeNames was just called")
	}
	callInfo := struct {
		Worktrees map[string]*internal.WorktreeListInfo
	}{
		Worktrees: worktrees,
	}
	mock.lockGetSortedWorktreeNames.Lock()
	mock.calls.GetSortedWorktreeNames = append(mock.calls.GetSortedWorktreeNames, callInfo)
	mock.lockGetSortedWorktreeNames.Unlock()
	return mock.GetSortedWorktreeNamesFunc(worktrees)
}

// GetSortedWorktreeNamesCalls gets all the calls that were made to GetSortedWorktreeNames.
// Check the length with:
//
//	len(mockedworktreeSwitcher.GetSortedWorktreeNamesCalls())
func (mock *worktreeSwitcherMock) GetSortedWorktreeNamesCalls() []struct {
	Worktrees map[string]*internal.WorktreeListInfo
} {
	var calls []struct {
		Worktrees map[string]*internal.WorktreeListInfo
	}
	mock.lockGetSortedWorktreeNames.RLock()
	calls = mock.calls.GetSortedWorktreeNames
	mock.lockGetSortedWorktreeNames.RUnlock()
	return calls
}

// GetStatusIcon calls GetStatusIconFunc.
func (mock *worktreeSwitcherMock) GetStatusIcon(gitStatus *internal.GitStatus) string {
	if mock.GetStatusIconFunc == nil {
		panic("worktreeSwitcherMock.GetStatusIconFunc: method is nil but worktreeSwitcher.GetStatusIcon was just called")
	}
	callInfo := struct {
		GitStatus *internal.GitStatus
	}{
		GitStatus: gitStatus,
	}
	mock.lockGetStatusIcon.Lock()
	mock.calls.GetStatusIcon = append(mock.calls.GetStatusIcon, callInfo)
	mock.lockGetStatusIcon.Unlock()
	return mock.GetStatusIconFunc(gitStatus)
}

// GetStatusIconCalls gets all the calls that were made to GetStatusIcon.
// Check the length with:
//
//	len(mockedworktreeSwitcher.GetStatusIconCalls())
func (mock *worktreeSwitcherMock) GetStatusIconCalls() []struct {
	GitStatus *internal.GitStatus
} {
	var calls []struct {
		GitStatus *internal.GitStatus
	}
	mock.lockGetStatusIcon.RLock()
	calls = mock.calls.GetStatusIcon
	mock.lockGetStatusIcon.RUnlock()
	return calls
}

// GetWorktreePath calls GetWorktreePathFunc.
func (mock *worktreeSwitcherMock) GetWorktreePath(worktreeName string) (string, error) {
	if mock.GetWorktreePathFunc == nil {
		panic("worktreeSwitcherMock.GetWorktreePathFunc: method is nil but worktreeSwitcher.GetWorktreePath was just called")
	}
	callInfo := struct {
		WorktreeName string
	}{
		WorktreeName: worktreeName,
	}
	mock.lockGetWorktreePath.Lock()
	mock.calls.GetWorktreePath = append(mock.calls.GetWorktreePath, callInfo)
	mock.lockGetWorktreePath.Unlock()
	return mock.GetWorktreePathFunc(worktreeName)
}

// GetWorktreePathCalls gets all the calls that were made to GetWorktreePath.
// Check the length with:
//
//	len(mockedworktreeSwitcher.GetWorktreePathCalls())
func (mock *worktreeSwitcherMock) GetWorktreePathCalls() []struct {
	WorktreeName string
} {
	var calls []struct {
		WorktreeName string
	}
	mock.lockGetWorktreePath.RLock()
	calls = mock.calls.GetWorktreePath
	mock.lockGetWorktreePath.RUnlock()
	return calls
}

// SetCurrentWorktree calls SetCurrentWorktreeFunc.
func (mock *worktreeSwitcherMock) SetCurrentWorktree(worktreeName string) error {
	if mock.SetCurrentWorktreeFunc == nil {
		panic("worktreeSwitcherMock.SetCurrentWorktreeFunc: method is nil but worktreeSwitcher.SetCurrentWorktree was just called")
	}
	callInfo := struct {
		WorktreeName string
	}{
		WorktreeName: worktreeName,
	}
	mock.lockSetCurrentWorktree.Lock()
	mock.calls.SetCurrentWorktree = append(mock.calls.SetCurrentWorktree, callInfo)
	mock.lockSetCurrentWorktree.Unlock()
	return mock.SetCurrentWorktreeFunc(worktreeName)
}

// SetCurrentWorktreeCalls gets all the calls that were made to SetCurrentWorktree.
// Check the length with:
//
//	len(mockedworktreeSwitcher.SetCurrentWorktreeCalls())
func (mock *worktreeSwitcherMock) SetCurrentWorktreeCalls() []struct {
	WorktreeName string
} {
	var calls []struct {
		WorktreeName string
	}
	mock.lockSetCurrentWorktree.RLock()
	calls = mock.calls.SetCurrentWorktree
	mock.lockSetCurrentWorktree.RUnlock()
	return calls
}
