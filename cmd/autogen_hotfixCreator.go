// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that hotfixCreatorMock does implement hotfixCreator.
// If this is not the case, regenerate this file with moq.
var _ hotfixCreator = &hotfixCreatorMock{}

// hotfixCreatorMock is a mock implementation of hotfixCreator.
//
//	func TestSomethingThatUseshotfixCreator(t *testing.T) {
//
//		// make and configure a mocked hotfixCreator
//		mockedhotfixCreator := &hotfixCreatorMock{
//			AddWorktreeFunc: func(worktreeName string, branchName string, createBranch bool, baseBranch string) error {
//				panic("mock out the AddWorktree method")
//			},
//			FindProductionBranchFunc: func() (string, error) {
//				panic("mock out the FindProductionBranch method")
//			},
//			GenerateBranchFromJiraFunc: func(jiraKey string) (string, error) {
//				panic("mock out the GenerateBranchFromJira method")
//			},
//			GetConfigFunc: func() *internal.Config {
//				panic("mock out the GetConfig method")
//			},
//			GetDefaultBranchFunc: func() (string, error) {
//				panic("mock out the GetDefaultBranch method")
//			},
//			GetGBMConfigFunc: func() *internal.GBMConfig {
//				panic("mock out the GetGBMConfig method")
//			},
//			GetJiraIssuesFunc: func() ([]internal.JiraIssue, error) {
//				panic("mock out the GetJiraIssues method")
//			},
//		}
//
//		// use mockedhotfixCreator in code that requires hotfixCreator
//		// and then make assertions.
//
//	}
type hotfixCreatorMock struct {
	// AddWorktreeFunc mocks the AddWorktree method.
	AddWorktreeFunc func(worktreeName string, branchName string, createBranch bool, baseBranch string) error

	// FindProductionBranchFunc mocks the FindProductionBranch method.
	FindProductionBranchFunc func() (string, error)

	// GenerateBranchFromJiraFunc mocks the GenerateBranchFromJira method.
	GenerateBranchFromJiraFunc func(jiraKey string) (string, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *internal.Config

	// GetDefaultBranchFunc mocks the GetDefaultBranch method.
	GetDefaultBranchFunc func() (string, error)

	// GetGBMConfigFunc mocks the GetGBMConfig method.
	GetGBMConfigFunc func() *internal.GBMConfig

	// GetJiraIssuesFunc mocks the GetJiraIssues method.
	GetJiraIssuesFunc func() ([]internal.JiraIssue, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddWorktree holds details about calls to the AddWorktree method.
		AddWorktree []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
			// BranchName is the branchName argument value.
			BranchName string
			// CreateBranch is the createBranch argument value.
			CreateBranch bool
			// BaseBranch is the baseBranch argument value.
			BaseBranch string
		}
		// FindProductionBranch holds details about calls to the FindProductionBranch method.
		FindProductionBranch []struct {
		}
		// GenerateBranchFromJira holds details about calls to the GenerateBranchFromJira method.
		GenerateBranchFromJira []struct {
			// JiraKey is the jiraKey argument value.
			JiraKey string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetDefaultBranch holds details about calls to the GetDefaultBranch method.
		GetDefaultBranch []struct {
		}
		// GetGBMConfig holds details about calls to the GetGBMConfig method.
		GetGBMConfig []struct {
		}
		// GetJiraIssues holds details about calls to the GetJiraIssues method.
		GetJiraIssues []struct {
		}
	}
	lockAddWorktree            sync.RWMutex
	lockFindProductionBranch   sync.RWMutex
	lockGenerateBranchFromJira sync.RWMutex
	lockGetConfig              sync.RWMutex
	lockGetDefaultBranch       sync.RWMutex
	lockGetGBMConfig           sync.RWMutex
	lockGetJiraIssues          sync.RWMutex
}

// AddWorktree calls AddWorktreeFunc.
func (mock *hotfixCreatorMock) AddWorktree(worktreeName string, branchName string, createBranch bool, baseBranch string) error {
	if mock.AddWorktreeFunc == nil {
		panic("hotfixCreatorMock.AddWorktreeFunc: method is nil but hotfixCreator.AddWorktree was just called")
	}
	callInfo := struct {
		WorktreeName string
		BranchName   string
		CreateBranch bool
		BaseBranch   string
	}{
		WorktreeName: worktreeName,
		BranchName:   branchName,
		CreateBranch: createBranch,
		BaseBranch:   baseBranch,
	}
	mock.lockAddWorktree.Lock()
	mock.calls.AddWorktree = append(mock.calls.AddWorktree, callInfo)
	mock.lockAddWorktree.Unlock()
	return mock.AddWorktreeFunc(worktreeName, branchName, createBranch, baseBranch)
}

// AddWorktreeCalls gets all the calls that were made to AddWorktree.
// Check the length with:
//
//	len(mockedhotfixCreator.AddWorktreeCalls())
func (mock *hotfixCreatorMock) AddWorktreeCalls() []struct {
	WorktreeName string
	BranchName   string
	CreateBranch bool
	BaseBranch   string
} {
	var calls []struct {
		WorktreeName string
		BranchName   string
		CreateBranch bool
		BaseBranch   string
	}
	mock.lockAddWorktree.RLock()
	calls = mock.calls.AddWorktree
	mock.lockAddWorktree.RUnlock()
	return calls
}

// FindProductionBranch calls FindProductionBranchFunc.
func (mock *hotfixCreatorMock) FindProductionBranch() (string, error) {
	if mock.FindProductionBranchFunc == nil {
		panic("hotfixCreatorMock.FindProductionBranchFunc: method is nil but hotfixCreator.FindProductionBranch was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFindProductionBranch.Lock()
	mock.calls.FindProductionBranch = append(mock.calls.FindProductionBranch, callInfo)
	mock.lockFindProductionBranch.Unlock()
	return mock.FindProductionBranchFunc()
}

// FindProductionBranchCalls gets all the calls that were made to FindProductionBranch.
// Check the length with:
//
//	len(mockedhotfixCreator.FindProductionBranchCalls())
func (mock *hotfixCreatorMock) FindProductionBranchCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFindProductionBranch.RLock()
	calls = mock.calls.FindProductionBranch
	mock.lockFindProductionBranch.RUnlock()
	return calls
}

// GenerateBranchFromJira calls GenerateBranchFromJiraFunc.
func (mock *hotfixCreatorMock) GenerateBranchFromJira(jiraKey string) (string, error) {
	if mock.GenerateBranchFromJiraFunc == nil {
		panic("hotfixCreatorMock.GenerateBranchFromJiraFunc: method is nil but hotfixCreator.GenerateBranchFromJira was just called")
	}
	callInfo := struct {
		JiraKey string
	}{
		JiraKey: jiraKey,
	}
	mock.lockGenerateBranchFromJira.Lock()
	mock.calls.GenerateBranchFromJira = append(mock.calls.GenerateBranchFromJira, callInfo)
	mock.lockGenerateBranchFromJira.Unlock()
	return mock.GenerateBranchFromJiraFunc(jiraKey)
}

// GenerateBranchFromJiraCalls gets all the calls that were made to GenerateBranchFromJira.
// Check the length with:
//
//	len(mockedhotfixCreator.GenerateBranchFromJiraCalls())
func (mock *hotfixCreatorMock) GenerateBranchFromJiraCalls() []struct {
	JiraKey string
} {
	var calls []struct {
		JiraKey string
	}
	mock.lockGenerateBranchFromJira.RLock()
	calls = mock.calls.GenerateBranchFromJira
	mock.lockGenerateBranchFromJira.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *hotfixCreatorMock) GetConfig() *internal.Config {
	if mock.GetConfigFunc == nil {
		panic("hotfixCreatorMock.GetConfigFunc: method is nil but hotfixCreator.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedhotfixCreator.GetConfigCalls())
func (mock *hotfixCreatorMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetDefaultBranch calls GetDefaultBranchFunc.
func (mock *hotfixCreatorMock) GetDefaultBranch() (string, error) {
	if mock.GetDefaultBranchFunc == nil {
		panic("hotfixCreatorMock.GetDefaultBranchFunc: method is nil but hotfixCreator.GetDefaultBranch was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDefaultBranch.Lock()
	mock.calls.GetDefaultBranch = append(mock.calls.GetDefaultBranch, callInfo)
	mock.lockGetDefaultBranch.Unlock()
	return mock.GetDefaultBranchFunc()
}

// GetDefaultBranchCalls gets all the calls that were made to GetDefaultBranch.
// Check the length with:
//
//	len(mockedhotfixCreator.GetDefaultBranchCalls())
func (mock *hotfixCreatorMock) GetDefaultBranchCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDefaultBranch.RLock()
	calls = mock.calls.GetDefaultBranch
	mock.lockGetDefaultBranch.RUnlock()
	return calls
}

// GetGBMConfig calls GetGBMConfigFunc.
func (mock *hotfixCreatorMock) GetGBMConfig() *internal.GBMConfig {
	if mock.GetGBMConfigFunc == nil {
		panic("hotfixCreatorMock.GetGBMConfigFunc: method is nil but hotfixCreator.GetGBMConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGBMConfig.Lock()
	mock.calls.GetGBMConfig = append(mock.calls.GetGBMConfig, callInfo)
	mock.lockGetGBMConfig.Unlock()
	return mock.GetGBMConfigFunc()
}

// GetGBMConfigCalls gets all the calls that were made to GetGBMConfig.
// Check the length with:
//
//	len(mockedhotfixCreator.GetGBMConfigCalls())
func (mock *hotfixCreatorMock) GetGBMConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGBMConfig.RLock()
	calls = mock.calls.GetGBMConfig
	mock.lockGetGBMConfig.RUnlock()
	return calls
}

// GetJiraIssues calls GetJiraIssuesFunc.
func (mock *hotfixCreatorMock) GetJiraIssues() ([]internal.JiraIssue, error) {
	if mock.GetJiraIssuesFunc == nil {
		panic("hotfixCreatorMock.GetJiraIssuesFunc: method is nil but hotfixCreator.GetJiraIssues was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetJiraIssues.Lock()
	mock.calls.GetJiraIssues = append(mock.calls.GetJiraIssues, callInfo)
	mock.lockGetJiraIssues.Unlock()
	return mock.GetJiraIssuesFunc()
}

// GetJiraIssuesCalls gets all the calls that were made to GetJiraIssues.
// Check the length with:
//
//	len(mockedhotfixCreator.GetJiraIssuesCalls())
func (mock *hotfixCreatorMock) GetJiraIssuesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetJiraIssues.RLock()
	calls = mock.calls.GetJiraIssues
	mock.lockGetJiraIssues.RUnlock()
	return calls
}
