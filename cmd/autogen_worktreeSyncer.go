// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreeSyncerMock does implement worktreeSyncer.
// If this is not the case, regenerate this file with moq.
var _ worktreeSyncer = &worktreeSyncerMock{}

// worktreeSyncerMock is a mock implementation of worktreeSyncer.
//
//	func TestSomethingThatUsesworktreeSyncer(t *testing.T) {
//
//		// make and configure a mocked worktreeSyncer
//		mockedworktreeSyncer := &worktreeSyncerMock{
//			GetSyncStatusFunc: func() (*internal.SyncStatus, error) {
//				panic("mock out the GetSyncStatus method")
//			},
//			SyncWithConfirmationFunc: func(dryRun bool, force bool, confirmFunc internal.ConfirmationFunc) error {
//				panic("mock out the SyncWithConfirmation method")
//			},
//		}
//
//		// use mockedworktreeSyncer in code that requires worktreeSyncer
//		// and then make assertions.
//
//	}
type worktreeSyncerMock struct {
	// GetSyncStatusFunc mocks the GetSyncStatus method.
	GetSyncStatusFunc func() (*internal.SyncStatus, error)

	// SyncWithConfirmationFunc mocks the SyncWithConfirmation method.
	SyncWithConfirmationFunc func(dryRun bool, force bool, confirmFunc internal.ConfirmationFunc) error

	// calls tracks calls to the methods.
	calls struct {
		// GetSyncStatus holds details about calls to the GetSyncStatus method.
		GetSyncStatus []struct {
		}
		// SyncWithConfirmation holds details about calls to the SyncWithConfirmation method.
		SyncWithConfirmation []struct {
			// DryRun is the dryRun argument value.
			DryRun bool
			// Force is the force argument value.
			Force bool
			// ConfirmFunc is the confirmFunc argument value.
			ConfirmFunc internal.ConfirmationFunc
		}
	}
	lockGetSyncStatus        sync.RWMutex
	lockSyncWithConfirmation sync.RWMutex
}

// GetSyncStatus calls GetSyncStatusFunc.
func (mock *worktreeSyncerMock) GetSyncStatus() (*internal.SyncStatus, error) {
	if mock.GetSyncStatusFunc == nil {
		panic("worktreeSyncerMock.GetSyncStatusFunc: method is nil but worktreeSyncer.GetSyncStatus was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSyncStatus.Lock()
	mock.calls.GetSyncStatus = append(mock.calls.GetSyncStatus, callInfo)
	mock.lockGetSyncStatus.Unlock()
	return mock.GetSyncStatusFunc()
}

// GetSyncStatusCalls gets all the calls that were made to GetSyncStatus.
// Check the length with:
//
//	len(mockedworktreeSyncer.GetSyncStatusCalls())
func (mock *worktreeSyncerMock) GetSyncStatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSyncStatus.RLock()
	calls = mock.calls.GetSyncStatus
	mock.lockGetSyncStatus.RUnlock()
	return calls
}

// SyncWithConfirmation calls SyncWithConfirmationFunc.
func (mock *worktreeSyncerMock) SyncWithConfirmation(dryRun bool, force bool, confirmFunc internal.ConfirmationFunc) error {
	if mock.SyncWithConfirmationFunc == nil {
		panic("worktreeSyncerMock.SyncWithConfirmationFunc: method is nil but worktreeSyncer.SyncWithConfirmation was just called")
	}
	callInfo := struct {
		DryRun      bool
		Force       bool
		ConfirmFunc internal.ConfirmationFunc
	}{
		DryRun:      dryRun,
		Force:       force,
		ConfirmFunc: confirmFunc,
	}
	mock.lockSyncWithConfirmation.Lock()
	mock.calls.SyncWithConfirmation = append(mock.calls.SyncWithConfirmation, callInfo)
	mock.lockSyncWithConfirmation.Unlock()
	return mock.SyncWithConfirmationFunc(dryRun, force, confirmFunc)
}

// SyncWithConfirmationCalls gets all the calls that were made to SyncWithConfirmation.
// Check the length with:
//
//	len(mockedworktreeSyncer.SyncWithConfirmationCalls())
func (mock *worktreeSyncerMock) SyncWithConfirmationCalls() []struct {
	DryRun      bool
	Force       bool
	ConfirmFunc internal.ConfirmationFunc
} {
	var calls []struct {
		DryRun      bool
		Force       bool
		ConfirmFunc internal.ConfirmationFunc
	}
	mock.lockSyncWithConfirmation.RLock()
	calls = mock.calls.SyncWithConfirmation
	mock.lockSyncWithConfirmation.RUnlock()
	return calls
}
