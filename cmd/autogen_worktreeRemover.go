// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreeRemoverMock does implement worktreeRemover.
// If this is not the case, regenerate this file with moq.
var _ worktreeRemover = &worktreeRemoverMock{}

// worktreeRemoverMock is a mock implementation of worktreeRemover.
//
//	func TestSomethingThatUsesworktreeRemover(t *testing.T) {
//
//		// make and configure a mocked worktreeRemover
//		mockedworktreeRemover := &worktreeRemoverMock{
//			GetAllWorktreesFunc: func() (map[string]*internal.WorktreeListInfo, error) {
//				panic("mock out the GetAllWorktrees method")
//			},
//			GetWorktreePathFunc: func(worktreeName string) (string, error) {
//				panic("mock out the GetWorktreePath method")
//			},
//			GetWorktreeStatusFunc: func(worktreePath string) (*internal.GitStatus, error) {
//				panic("mock out the GetWorktreeStatus method")
//			},
//			RemoveWorktreeFunc: func(worktreeName string) error {
//				panic("mock out the RemoveWorktree method")
//			},
//		}
//
//		// use mockedworktreeRemover in code that requires worktreeRemover
//		// and then make assertions.
//
//	}
type worktreeRemoverMock struct {
	// GetAllWorktreesFunc mocks the GetAllWorktrees method.
	GetAllWorktreesFunc func() (map[string]*internal.WorktreeListInfo, error)

	// GetWorktreePathFunc mocks the GetWorktreePath method.
	GetWorktreePathFunc func(worktreeName string) (string, error)

	// GetWorktreeStatusFunc mocks the GetWorktreeStatus method.
	GetWorktreeStatusFunc func(worktreePath string) (*internal.GitStatus, error)

	// RemoveWorktreeFunc mocks the RemoveWorktree method.
	RemoveWorktreeFunc func(worktreeName string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllWorktrees holds details about calls to the GetAllWorktrees method.
		GetAllWorktrees []struct {
		}
		// GetWorktreePath holds details about calls to the GetWorktreePath method.
		GetWorktreePath []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
		}
		// GetWorktreeStatus holds details about calls to the GetWorktreeStatus method.
		GetWorktreeStatus []struct {
			// WorktreePath is the worktreePath argument value.
			WorktreePath string
		}
		// RemoveWorktree holds details about calls to the RemoveWorktree method.
		RemoveWorktree []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
		}
	}
	lockGetAllWorktrees   sync.RWMutex
	lockGetWorktreePath   sync.RWMutex
	lockGetWorktreeStatus sync.RWMutex
	lockRemoveWorktree    sync.RWMutex
}

// GetAllWorktrees calls GetAllWorktreesFunc.
func (mock *worktreeRemoverMock) GetAllWorktrees() (map[string]*internal.WorktreeListInfo, error) {
	if mock.GetAllWorktreesFunc == nil {
		panic("worktreeRemoverMock.GetAllWorktreesFunc: method is nil but worktreeRemover.GetAllWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllWorktrees.Lock()
	mock.calls.GetAllWorktrees = append(mock.calls.GetAllWorktrees, callInfo)
	mock.lockGetAllWorktrees.Unlock()
	return mock.GetAllWorktreesFunc()
}

// GetAllWorktreesCalls gets all the calls that were made to GetAllWorktrees.
// Check the length with:
//
//	len(mockedworktreeRemover.GetAllWorktreesCalls())
func (mock *worktreeRemoverMock) GetAllWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllWorktrees.RLock()
	calls = mock.calls.GetAllWorktrees
	mock.lockGetAllWorktrees.RUnlock()
	return calls
}

// GetWorktreePath calls GetWorktreePathFunc.
func (mock *worktreeRemoverMock) GetWorktreePath(worktreeName string) (string, error) {
	if mock.GetWorktreePathFunc == nil {
		panic("worktreeRemoverMock.GetWorktreePathFunc: method is nil but worktreeRemover.GetWorktreePath was just called")
	}
	callInfo := struct {
		WorktreeName string
	}{
		WorktreeName: worktreeName,
	}
	mock.lockGetWorktreePath.Lock()
	mock.calls.GetWorktreePath = append(mock.calls.GetWorktreePath, callInfo)
	mock.lockGetWorktreePath.Unlock()
	return mock.GetWorktreePathFunc(worktreeName)
}

// GetWorktreePathCalls gets all the calls that were made to GetWorktreePath.
// Check the length with:
//
//	len(mockedworktreeRemover.GetWorktreePathCalls())
func (mock *worktreeRemoverMock) GetWorktreePathCalls() []struct {
	WorktreeName string
} {
	var calls []struct {
		WorktreeName string
	}
	mock.lockGetWorktreePath.RLock()
	calls = mock.calls.GetWorktreePath
	mock.lockGetWorktreePath.RUnlock()
	return calls
}

// GetWorktreeStatus calls GetWorktreeStatusFunc.
func (mock *worktreeRemoverMock) GetWorktreeStatus(worktreePath string) (*internal.GitStatus, error) {
	if mock.GetWorktreeStatusFunc == nil {
		panic("worktreeRemoverMock.GetWorktreeStatusFunc: method is nil but worktreeRemover.GetWorktreeStatus was just called")
	}
	callInfo := struct {
		WorktreePath string
	}{
		WorktreePath: worktreePath,
	}
	mock.lockGetWorktreeStatus.Lock()
	mock.calls.GetWorktreeStatus = append(mock.calls.GetWorktreeStatus, callInfo)
	mock.lockGetWorktreeStatus.Unlock()
	return mock.GetWorktreeStatusFunc(worktreePath)
}

// GetWorktreeStatusCalls gets all the calls that were made to GetWorktreeStatus.
// Check the length with:
//
//	len(mockedworktreeRemover.GetWorktreeStatusCalls())
func (mock *worktreeRemoverMock) GetWorktreeStatusCalls() []struct {
	WorktreePath string
} {
	var calls []struct {
		WorktreePath string
	}
	mock.lockGetWorktreeStatus.RLock()
	calls = mock.calls.GetWorktreeStatus
	mock.lockGetWorktreeStatus.RUnlock()
	return calls
}

// RemoveWorktree calls RemoveWorktreeFunc.
func (mock *worktreeRemoverMock) RemoveWorktree(worktreeName string) error {
	if mock.RemoveWorktreeFunc == nil {
		panic("worktreeRemoverMock.RemoveWorktreeFunc: method is nil but worktreeRemover.RemoveWorktree was just called")
	}
	callInfo := struct {
		WorktreeName string
	}{
		WorktreeName: worktreeName,
	}
	mock.lockRemoveWorktree.Lock()
	mock.calls.RemoveWorktree = append(mock.calls.RemoveWorktree, callInfo)
	mock.lockRemoveWorktree.Unlock()
	return mock.RemoveWorktreeFunc(worktreeName)
}

// RemoveWorktreeCalls gets all the calls that were made to RemoveWorktree.
// Check the length with:
//
//	len(mockedworktreeRemover.RemoveWorktreeCalls())
func (mock *worktreeRemoverMock) RemoveWorktreeCalls() []struct {
	WorktreeName string
} {
	var calls []struct {
		WorktreeName string
	}
	mock.lockRemoveWorktree.RLock()
	calls = mock.calls.RemoveWorktree
	mock.lockRemoveWorktree.RUnlock()
	return calls
}
