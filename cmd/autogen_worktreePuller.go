// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreePullerMock does implement worktreePuller.
// If this is not the case, regenerate this file with moq.
var _ worktreePuller = &worktreePullerMock{}

// worktreePullerMock is a mock implementation of worktreePuller.
//
//	func TestSomethingThatUsesworktreePuller(t *testing.T) {
//
//		// make and configure a mocked worktreePuller
//		mockedworktreePuller := &worktreePullerMock{
//			GetAllWorktreesFunc: func() (map[string]*internal.WorktreeListInfo, error) {
//				panic("mock out the GetAllWorktrees method")
//			},
//			IsInWorktreeFunc: func(currentPath string) (bool, string, error) {
//				panic("mock out the IsInWorktree method")
//			},
//			PullAllWorktreesFunc: func() error {
//				panic("mock out the PullAllWorktrees method")
//			},
//			PullWorktreeFunc: func(worktreeName string) error {
//				panic("mock out the PullWorktree method")
//			},
//		}
//
//		// use mockedworktreePuller in code that requires worktreePuller
//		// and then make assertions.
//
//	}
type worktreePullerMock struct {
	// GetAllWorktreesFunc mocks the GetAllWorktrees method.
	GetAllWorktreesFunc func() (map[string]*internal.WorktreeListInfo, error)

	// IsInWorktreeFunc mocks the IsInWorktree method.
	IsInWorktreeFunc func(currentPath string) (bool, string, error)

	// PullAllWorktreesFunc mocks the PullAllWorktrees method.
	PullAllWorktreesFunc func() error

	// PullWorktreeFunc mocks the PullWorktree method.
	PullWorktreeFunc func(worktreeName string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllWorktrees holds details about calls to the GetAllWorktrees method.
		GetAllWorktrees []struct {
		}
		// IsInWorktree holds details about calls to the IsInWorktree method.
		IsInWorktree []struct {
			// CurrentPath is the currentPath argument value.
			CurrentPath string
		}
		// PullAllWorktrees holds details about calls to the PullAllWorktrees method.
		PullAllWorktrees []struct {
		}
		// PullWorktree holds details about calls to the PullWorktree method.
		PullWorktree []struct {
			// WorktreeName is the worktreeName argument value.
			WorktreeName string
		}
	}
	lockGetAllWorktrees  sync.RWMutex
	lockIsInWorktree     sync.RWMutex
	lockPullAllWorktrees sync.RWMutex
	lockPullWorktree     sync.RWMutex
}

// GetAllWorktrees calls GetAllWorktreesFunc.
func (mock *worktreePullerMock) GetAllWorktrees() (map[string]*internal.WorktreeListInfo, error) {
	if mock.GetAllWorktreesFunc == nil {
		panic("worktreePullerMock.GetAllWorktreesFunc: method is nil but worktreePuller.GetAllWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllWorktrees.Lock()
	mock.calls.GetAllWorktrees = append(mock.calls.GetAllWorktrees, callInfo)
	mock.lockGetAllWorktrees.Unlock()
	return mock.GetAllWorktreesFunc()
}

// GetAllWorktreesCalls gets all the calls that were made to GetAllWorktrees.
// Check the length with:
//
//	len(mockedworktreePuller.GetAllWorktreesCalls())
func (mock *worktreePullerMock) GetAllWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllWorktrees.RLock()
	calls = mock.calls.GetAllWorktrees
	mock.lockGetAllWorktrees.RUnlock()
	return calls
}

// IsInWorktree calls IsInWorktreeFunc.
func (mock *worktreePullerMock) IsInWorktree(currentPath string) (bool, string, error) {
	if mock.IsInWorktreeFunc == nil {
		panic("worktreePullerMock.IsInWorktreeFunc: method is nil but worktreePuller.IsInWorktree was just called")
	}
	callInfo := struct {
		CurrentPath string
	}{
		CurrentPath: currentPath,
	}
	mock.lockIsInWorktree.Lock()
	mock.calls.IsInWorktree = append(mock.calls.IsInWorktree, callInfo)
	mock.lockIsInWorktree.Unlock()
	return mock.IsInWorktreeFunc(currentPath)
}

// IsInWorktreeCalls gets all the calls that were made to IsInWorktree.
// Check the length with:
//
//	len(mockedworktreePuller.IsInWorktreeCalls())
func (mock *worktreePullerMock) IsInWorktreeCalls() []struct {
	CurrentPath string
} {
	var calls []struct {
		CurrentPath string
	}
	mock.lockIsInWorktree.RLock()
	calls = mock.calls.IsInWorktree
	mock.lockIsInWorktree.RUnlock()
	return calls
}

// PullAllWorktrees calls PullAllWorktreesFunc.
func (mock *worktreePullerMock) PullAllWorktrees() error {
	if mock.PullAllWorktreesFunc == nil {
		panic("worktreePullerMock.PullAllWorktreesFunc: method is nil but worktreePuller.PullAllWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPullAllWorktrees.Lock()
	mock.calls.PullAllWorktrees = append(mock.calls.PullAllWorktrees, callInfo)
	mock.lockPullAllWorktrees.Unlock()
	return mock.PullAllWorktreesFunc()
}

// PullAllWorktreesCalls gets all the calls that were made to PullAllWorktrees.
// Check the length with:
//
//	len(mockedworktreePuller.PullAllWorktreesCalls())
func (mock *worktreePullerMock) PullAllWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPullAllWorktrees.RLock()
	calls = mock.calls.PullAllWorktrees
	mock.lockPullAllWorktrees.RUnlock()
	return calls
}

// PullWorktree calls PullWorktreeFunc.
func (mock *worktreePullerMock) PullWorktree(worktreeName string) error {
	if mock.PullWorktreeFunc == nil {
		panic("worktreePullerMock.PullWorktreeFunc: method is nil but worktreePuller.PullWorktree was just called")
	}
	callInfo := struct {
		WorktreeName string
	}{
		WorktreeName: worktreeName,
	}
	mock.lockPullWorktree.Lock()
	mock.calls.PullWorktree = append(mock.calls.PullWorktree, callInfo)
	mock.lockPullWorktree.Unlock()
	return mock.PullWorktreeFunc(worktreeName)
}

// PullWorktreeCalls gets all the calls that were made to PullWorktree.
// Check the length with:
//
//	len(mockedworktreePuller.PullWorktreeCalls())
func (mock *worktreePullerMock) PullWorktreeCalls() []struct {
	WorktreeName string
} {
	var calls []struct {
		WorktreeName string
	}
	mock.lockPullWorktree.RLock()
	calls = mock.calls.PullWorktree
	mock.lockPullWorktree.RUnlock()
	return calls
}
