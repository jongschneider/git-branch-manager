// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"gbm/internal"
	"sync"
)

// Ensure, that worktreeListerMock does implement worktreeLister.
// If this is not the case, regenerate this file with moq.
var _ worktreeLister = &worktreeListerMock{}

// worktreeListerMock is a mock implementation of worktreeLister.
//
//	func TestSomethingThatUsesworktreeLister(t *testing.T) {
//
//		// make and configure a mocked worktreeLister
//		mockedworktreeLister := &worktreeListerMock{
//			GetAllWorktreesFunc: func() (map[string]*internal.WorktreeListInfo, error) {
//				panic("mock out the GetAllWorktrees method")
//			},
//			GetSortedWorktreeNamesFunc: func(worktrees map[string]*internal.WorktreeListInfo) []string {
//				panic("mock out the GetSortedWorktreeNames method")
//			},
//			GetSyncStatusFunc: func() (*internal.SyncStatus, error) {
//				panic("mock out the GetSyncStatus method")
//			},
//			GetWorktreeMappingFunc: func() (map[string]string, error) {
//				panic("mock out the GetWorktreeMapping method")
//			},
//		}
//
//		// use mockedworktreeLister in code that requires worktreeLister
//		// and then make assertions.
//
//	}
type worktreeListerMock struct {
	// GetAllWorktreesFunc mocks the GetAllWorktrees method.
	GetAllWorktreesFunc func() (map[string]*internal.WorktreeListInfo, error)

	// GetSortedWorktreeNamesFunc mocks the GetSortedWorktreeNames method.
	GetSortedWorktreeNamesFunc func(worktrees map[string]*internal.WorktreeListInfo) []string

	// GetSyncStatusFunc mocks the GetSyncStatus method.
	GetSyncStatusFunc func() (*internal.SyncStatus, error)

	// GetWorktreeMappingFunc mocks the GetWorktreeMapping method.
	GetWorktreeMappingFunc func() (map[string]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllWorktrees holds details about calls to the GetAllWorktrees method.
		GetAllWorktrees []struct {
		}
		// GetSortedWorktreeNames holds details about calls to the GetSortedWorktreeNames method.
		GetSortedWorktreeNames []struct {
			// Worktrees is the worktrees argument value.
			Worktrees map[string]*internal.WorktreeListInfo
		}
		// GetSyncStatus holds details about calls to the GetSyncStatus method.
		GetSyncStatus []struct {
		}
		// GetWorktreeMapping holds details about calls to the GetWorktreeMapping method.
		GetWorktreeMapping []struct {
		}
	}
	lockGetAllWorktrees        sync.RWMutex
	lockGetSortedWorktreeNames sync.RWMutex
	lockGetSyncStatus          sync.RWMutex
	lockGetWorktreeMapping     sync.RWMutex
}

// GetAllWorktrees calls GetAllWorktreesFunc.
func (mock *worktreeListerMock) GetAllWorktrees() (map[string]*internal.WorktreeListInfo, error) {
	if mock.GetAllWorktreesFunc == nil {
		panic("worktreeListerMock.GetAllWorktreesFunc: method is nil but worktreeLister.GetAllWorktrees was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllWorktrees.Lock()
	mock.calls.GetAllWorktrees = append(mock.calls.GetAllWorktrees, callInfo)
	mock.lockGetAllWorktrees.Unlock()
	return mock.GetAllWorktreesFunc()
}

// GetAllWorktreesCalls gets all the calls that were made to GetAllWorktrees.
// Check the length with:
//
//	len(mockedworktreeLister.GetAllWorktreesCalls())
func (mock *worktreeListerMock) GetAllWorktreesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllWorktrees.RLock()
	calls = mock.calls.GetAllWorktrees
	mock.lockGetAllWorktrees.RUnlock()
	return calls
}

// GetSortedWorktreeNames calls GetSortedWorktreeNamesFunc.
func (mock *worktreeListerMock) GetSortedWorktreeNames(worktrees map[string]*internal.WorktreeListInfo) []string {
	if mock.GetSortedWorktreeNamesFunc == nil {
		panic("worktreeListerMock.GetSortedWorktreeNamesFunc: method is nil but worktreeLister.GetSortedWorktreeNames was just called")
	}
	callInfo := struct {
		Worktrees map[string]*internal.WorktreeListInfo
	}{
		Worktrees: worktrees,
	}
	mock.lockGetSortedWorktreeNames.Lock()
	mock.calls.GetSortedWorktreeNames = append(mock.calls.GetSortedWorktreeNames, callInfo)
	mock.lockGetSortedWorktreeNames.Unlock()
	return mock.GetSortedWorktreeNamesFunc(worktrees)
}

// GetSortedWorktreeNamesCalls gets all the calls that were made to GetSortedWorktreeNames.
// Check the length with:
//
//	len(mockedworktreeLister.GetSortedWorktreeNamesCalls())
func (mock *worktreeListerMock) GetSortedWorktreeNamesCalls() []struct {
	Worktrees map[string]*internal.WorktreeListInfo
} {
	var calls []struct {
		Worktrees map[string]*internal.WorktreeListInfo
	}
	mock.lockGetSortedWorktreeNames.RLock()
	calls = mock.calls.GetSortedWorktreeNames
	mock.lockGetSortedWorktreeNames.RUnlock()
	return calls
}

// GetSyncStatus calls GetSyncStatusFunc.
func (mock *worktreeListerMock) GetSyncStatus() (*internal.SyncStatus, error) {
	if mock.GetSyncStatusFunc == nil {
		panic("worktreeListerMock.GetSyncStatusFunc: method is nil but worktreeLister.GetSyncStatus was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSyncStatus.Lock()
	mock.calls.GetSyncStatus = append(mock.calls.GetSyncStatus, callInfo)
	mock.lockGetSyncStatus.Unlock()
	return mock.GetSyncStatusFunc()
}

// GetSyncStatusCalls gets all the calls that were made to GetSyncStatus.
// Check the length with:
//
//	len(mockedworktreeLister.GetSyncStatusCalls())
func (mock *worktreeListerMock) GetSyncStatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSyncStatus.RLock()
	calls = mock.calls.GetSyncStatus
	mock.lockGetSyncStatus.RUnlock()
	return calls
}

// GetWorktreeMapping calls GetWorktreeMappingFunc.
func (mock *worktreeListerMock) GetWorktreeMapping() (map[string]string, error) {
	if mock.GetWorktreeMappingFunc == nil {
		panic("worktreeListerMock.GetWorktreeMappingFunc: method is nil but worktreeLister.GetWorktreeMapping was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWorktreeMapping.Lock()
	mock.calls.GetWorktreeMapping = append(mock.calls.GetWorktreeMapping, callInfo)
	mock.lockGetWorktreeMapping.Unlock()
	return mock.GetWorktreeMappingFunc()
}

// GetWorktreeMappingCalls gets all the calls that were made to GetWorktreeMapping.
// Check the length with:
//
//	len(mockedworktreeLister.GetWorktreeMappingCalls())
func (mock *worktreeListerMock) GetWorktreeMappingCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWorktreeMapping.RLock()
	calls = mock.calls.GetWorktreeMapping
	mock.lockGetWorktreeMapping.RUnlock()
	return calls
}
